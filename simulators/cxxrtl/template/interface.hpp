#ifndef interface_hpp
#define interface_hpp

#include <backends/cxxrtl/cxxrtl.h>

#include <cmath>
#include <cstddef>
#include <iostream>
#include <vector>

#include ".sim.cpp"

// Define Macro
#define CONCATENATE(in0, in1, in2) in0##in1##in2

#define SET_VALUE_FUNC(bitwidth, type)                              \
    void CONCATENATE(set, bitwidth, BitsVal)(const unsigned& val) { \
        item->set<bitwidth, type>(val);                             \
    };

#define SET_WIDTH_CONDITION(signal_width)       \
    if (width == signal_width)                  \
        CONCATENATE(set, signal_width, BitsVal) \
    (value);

#define SET_CXX_SIGNAL(signal_type, signal_name) \
    signal_type.emplace_back(SignalInfo(const_cast<cxxrtl::debug_item*>(&items->at(signal_name)), signal_name));

#define SET_CXX_TOP(top_module) \
    cxxrtl_design::p_##top_module top;

struct SignalInfo {
public:
    SignalInfo(const cxxrtl::debug_item* it, std::string n) : item(it), name(n) {
    }
    void setBoolVal(const bool& val) {
        item->set<1, bool>(val);
    }
    // Set signal value functions
    // End (Code is generated by GV)

    unsigned getUpper() { return std::pow(2, item->width); }
    unsigned getValue() { return *(item->curr); }
    unsigned getWidth() { return item->width; }
    std::string getName() { return name; }

    void setValue(size_t value) {
        size_t width = item->width;
        if (width == 1) setBoolVal(value);
        // Set N bits value condition
        // End (Code is generated by GV)
    }

private:
    const cxxrtl::debug_item* item;
    std::string name;
};

class Interface {
public:
    Interface(cxxrtl::debug_items* items) {
        top.debug_info(*items);

        // CLK Init
        // End (Code is generated by GV)

        // RST Init
        // End (Code is generated by GV)

        // PI Init List
        // End (Code is generated by GV)

        // PO Init List
        // End (Code is generated by GV)

        // REG Init List
        // End (Code is generated by GV)

        // MEM Init List
        // End (Code is generated by GV)
    }


    void step() { top.step(); }

    // Set top design object
    // End (Code is generated by GV)

    std::vector<SignalInfo> clk;
    std::vector<SignalInfo> rst;
    std::vector<SignalInfo> po;
    std::vector<SignalInfo> pi;
    std::vector<SignalInfo> reg;
    std::vector<SignalInfo> mem;
};

#endif /* interface_hpp */
